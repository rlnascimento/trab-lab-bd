-- CRIAR TABELAS
CREATE TABLE SERIE(
  CODIGO_SERIE CHAR(7) NOT NULL,
  NOME_SERIE VARCHAR(50) NOT NULL,
  DESCRICAO_SERIE VARCHAR(255) NOT NULL
);
  
CREATE TABLE EPISODIO(
  NUMERO INT NOT NULL,
  TEMPORADA INT NOT NULL,
  CODIGO_SERIE CHAR(7) NOT NULL,
  DATA_EXIBICAO DATE NOT NULL,
  DURACAO VARCHAR(8) NOT NULL,
  DESCRICAO_EPISODIO VARCHAR(255) NOT NULL
);
  
-- PRIMARY E FOREIGN KEYS
ALTER TABLE SERIE ADD CONSTRAINT PK_CODIGO_SERIE PRIMARY KEY (CODIGO_SERIE);
ALTER TABLE EPISODIO ADD CONSTRAINT FK_SERIE_EPISODIO FOREIGN KEY(CODIGO_SERIE) REFERENCES SERIE(CODIGO_SERIE);
ALTER TABLE EPISODIO ADD CONSTRAINT PK_EPISODIO PRIMARY KEY (NUMERO, TEMPORADA, CODIGO_SERIE);

-- STORED PROCEDURES EPISODIO
-- INSERIR EPISODIO
CREATE OR REPLACE PROCEDURE USP_INSERIR_EPISODIO(
    E_NUMERO INT,
    E_TEMPORADA INT,
    E_CODIGO_SERIE CHAR,
    E_DATA_EXIBICAO DATE,
    E_DURACAO VARCHAR,
    E_DESCRICAO_EPISODIO VARCHAR
)
AS BEGIN
  INSERT INTO EPISODIO(
  	NUMERO, TEMPORADA, CODIGO_SERIE, DATA_EXIBICAO, DURACAO, DESCRICAO_EPISODIO
  ) VALUES (
  	E_NUMERO, E_TEMPORADA, E_CODIGO_SERIE, E_DATA_EXIBICAO, E_DURACAO, E_DESCRICAO_EPISODIO
  );
END USP_INSERIR_EPISODIO;

-- ALTERAR EPISODIO
CREATE OR REPLACE PROCEDURE USP_ALTERAR_EPISODIO(
    E_NUMERO INT,
    E_TEMPORADA INT,
    E_CODIGO_SERIE CHAR,
    E_DATA_EXIBICAO DATE,
    E_DURACAO VARCHAR,
    E_DESCRICAO_EPISODIO VARCHAR
)
AS BEGIN
  UPDATE EPISODIO SET
  	DATA_EXIBICAO = E_DATA_EXIBICAO,
    DURACAO = E_DURACAO,
    DESCRICAO_EPISODIO = E_DESCRICAO_EPISODIO
  WHERE 
    (NUMERO = E_NUMERO) AND (TEMPORADA = E_TEMPORADA) AND (CODIGO_SERIE = E_CODIGO_SERIE);
END USP_ALTERAR_EPISODIO;

-- EXCLUIR EPISODIO
CREATE OR REPLACE PROCEDURE USP_EXCLUIR_EPISODIO(
    E_NUMERO INT,
    E_TEMPORADA INT,
    E_CODIGO_SERIE CHAR
)
AS BEGIN
    DELETE FROM
      EPISODIO
    WHERE
    	(NUMERO = E_NUMERO) AND (TEMPORADA = E_TEMPORADA) AND (CODIGO_SERIE = E_CODIGO_SERIE);
END USP_EXCLUIR_EPISODIO;

-- STORED PROCEDURES SERIE
-- CRIAR SERIE
CREATE OR REPLACE PROCEDURE USP_INSERIR_SERIE(
  E_CODIGO_SERIE IN CHAR,
  E_NOME_SERIE IN VARCHAR,
  E_DESCRICAO_SERIE IN VARCHAR
)
AS BEGIN
  INSERT INTO SERIE(
    CODIGO_SERIE, NOME_SERIE, DESCRICAO_SERIE
  ) VALUES (
    E_CODIGO_SERIE, E_NOME_SERIE, E_DESCRICAO_SERIE
  );
END USP_INSERIR_SERIE;

-- ALTERAR SERIE
CREATE OR REPLACE PROCEDURE USP_ALTERAR_SERIE(
  E_CODIGO_SERIE IN CHAR,
  E_NOME_SERIE IN VARCHAR,
  E_DESCRICAO_SERIE IN VARCHAR
)
AS BEGIN
  UPDATE SERIE SET
    NOME_SERIE = E_NOME_SERIE,
    DESCRICAO_SERIE = E_DESCRICAO_SERIE
  WHERE
    CODIGO_SERIE = E_CODIGO_SERIE;
END USP_ALTERAR_SERIE;

-- EXCLUIR SERIE
CREATE OR REPLACE PROCEDURE USP_EXCLUIR_SERIE(
  E_CODIGO_SERIE IN CHAR
)
AS BEGIN
  DELETE FROM
    SERIE 
  WHERE
    CODIGO_SERIE = E_CODIGO_SERIE;
END USP_EXCLUIR_SERIE;

-- RELATORIO E TRIGGERS

-- TABELAS DE RELATORIO
-- CRIAR TABELAS
CREATE TABLE SERIE_RELATORIO(
  CODIGO_SERIE CHAR(7) NOT NULL,
  NOME_SERIE VARCHAR(50) NOT NULL,
  DESCRICAO_SERIE VARCHAR(255) NOT NULL,
  OPERACAO CHAR(1) NOT NULL,
  DATA_OPERACAO TIMESTAMP NOT NULL
);
  
CREATE TABLE EPISODIO_RELATORIO(
  NUMERO INT NOT NULL,
  TEMPORADA INT NOT NULL,
  CODIGO_SERIE CHAR(7) NOT NULL,
  DATA_EXIBICAO DATE NOT NULL,
  DURACAO VARCHAR(8) NOT NULL,
  DESCRICAO_EPISODIO VARCHAR(255) NOT NULL,
  OPERACAO CHAR(1) NOT NULL,
  DATA_OPERACAO TIMESTAMP NOT NULL
);

-- TRIGGERS

-- TRIGGER SERIE
CREATE OR REPLACE TRIGGER GERA_RELATORIO_SERIE AFTER
  INSERT OR UPDATE OR DELETE ON SERIE FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO SERIE_RELATORIO (
      CODIGO_SERIE,
      NOME_SERIE,
      DESCRICAO_SERIE,
      OPERACAO,
      DATA_OPERACAO
    )
    VALUES (
      :NEW.CODIGO_SERIE,
      :NEW.NOME_SERIE,
      :NEW.DESCRICAO_SERIE,
      'I',
      SYSDATE
    );
  ELSIF UPDATING THEN
      INSERT INTO SERIE_RELATORIO (
      CODIGO_SERIE,
      NOME_SERIE,
      DESCRICAO_SERIE,
      OPERACAO,
      DATA_OPERACAO
    )
    VALUES (
      :NEW.CODIGO_SERIE,
      :NEW.NOME_SERIE,
      :NEW.DESCRICAO_SERIE,
      'U',
      SYSDATE
    );
  ELSE
    INSERT INTO SERIE_RELATORIO (
      CODIGO_SERIE,
      NOME_SERIE,
      DESCRICAO_SERIE,
      OPERACAO,
      DATA_OPERACAO
    )
    VALUES (
      :OLD.CODIGO_SERIE,
      :OLD.NOME_SERIE,
      :OLD.DESCRICAO_SERIE,
      'D',
      SYSDATE
    );
  END IF;
END;

-- TRIGGER EPISODIO
CREATE OR REPLACE TRIGGER GERA_RELATORIO_EPISODIO AFTER
  INSERT OR UPDATE OR DELETE ON EPISODIO FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO EPISODIO_RELATORIO (
      NUMERO,
      TEMPORADA,
      CODIGO_SERIE,
      DATA_EXIBICAO,
      DURACAO,
      DESCRICAO_EPISODIO,
      OPERACAO,
      DATA_OPERACAO
    )
    VALUES (
      :NEW.NUMERO,
      :NEW.TEMPORADA,
      :NEW.CODIGO_SERIE,
      :NEW.DATA_EXIBICAO,
      :NEW.DURACAO,
      :NEW.DESCRICAO_EPISODIO,
      'I',
      SYSDATE
    );
  ELSIF UPDATING THEN
      INSERT INTO EPISODIO_RELATORIO (
      NUMERO,
      TEMPORADA,
      CODIGO_SERIE,
      DATA_EXIBICAO,
      DURACAO,
      DESCRICAO_EPISODIO,
      OPERACAO,
      DATA_OPERACAO
    )
    VALUES (
      :NEW.NUMERO,
      :NEW.TEMPORADA,
      :NEW.CODIGO_SERIE,
      :NEW.DATA_EXIBICAO,
      :NEW.DURACAO,
      :NEW.DESCRICAO_EPISODIO,
      'U',
      SYSDATE
    );
  ELSE
    INSERT INTO EPISODIO_RELATORIO (
      NUMERO,
      TEMPORADA,
      CODIGO_SERIE,
      DATA_EXIBICAO,
      DURACAO,
      DESCRICAO_EPISODIO,
      OPERACAO,
      DATA_OPERACAO
    )
    VALUES (
      :OLD.NUMERO,
      :OLD.TEMPORADA,
      :OLD.CODIGO_SERIE,
      :OLD.DATA_EXIBICAO,
      :OLD.DURACAO,
      :OLD.DESCRICAO_EPISODIO,
      'D',
      SYSDATE
    );
  END IF;
END;